[build-system]
requires = ["setuptools>=64", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "faktory-prometheus-exporter"
description = "Faktory metrics exporter for Prometheus, written in Python"
authors = [
  {name = "Matthieu Rigal", email = "matthieu.rigal@a2ei.org"},
]
license = {file = "LICENSE"}
requires-python = ">=3.8"
readme = "README.md"
keywords = [
  "faktory", "prometheus", "metrics"
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: System :: Monitoring",
  "Topic :: Software Development :: Libraries",
]
dynamic = ["version", "dependencies", "optional-dependencies"]

[project.scripts]
faktory-prometheus-exporter = "faktory_prometheus_exporter:main"

[project.urls]
Repository = "https://github.com/prospect-server/faktory-prometheus-exporter"
PyPI = "https://pypi.org/project/faktory-prometheus-exporter/"
"Gitlab Mirror" = "https://gitlab.com/prospect-energy/faktory-prometheus-exporter"

[tool.setuptools.dynamic]
dependencies = {file = ["requirements.in"]}
optional-dependencies.dev = { file = ["requirements-dev.in"] }

[tool.setuptools_scm]

[tool.ruff]
target-version = "py38"
preview = true
# Use unsafe-fixes while working on a daily basis, you can still add exceptions
unsafe-fixes = true

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # pydocstyle
    "D",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-comprehensions
    "C4",
    # flake8-print
    "T20",
    # flake8-simplify
    "SIM",
    # ruff-specific
    "RUF",
    # isort
    "I",
    # Perflint
    "PERF",
    # Refurb
    "FURB",
    # flake8-annotations
    "ANN",
    # FOR FURTHER IMPROVEMENTS
    # vulture-like (unused functions) rule, once available
    # https://github.com/astral-sh/ruff/issues/872
]

[tool.ruff.lint.pydocstyle]
convention = "google"
